
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://fxzamjowvpnyuxthusib.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZ4emFtam93dnBueXV4dGh1c2liIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDExNDc1NzYsImV4cCI6MjA1NjcyMzU3Nn0.2Af0kisQhmBsH22EsWOEuUtbUPziFk-U3MLGuHx8Nj4";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
    },
    realtime: {
      params: {
        eventsPerSecond: 10,
      },
    },
    db: {
      schema: 'public',
    },
  }
);

// Helper for getting the current user
export const getCurrentUser = async () => {
  const { data: { session } } = await supabase.auth.getSession();
  return session?.user || null;
};

// Helper for checking if user is authenticated
export const isAuthenticated = async () => {
  const { data: { session } } = await supabase.auth.getSession();
  return !!session;
};

// Helper for storing OAuth tokens
export const storeOAuthTokens = async (userId: string, platform: string, tokens: { access_token: string, refresh_token?: string }) => {
  return supabase
    .from('platform_connections')
    .upsert({
      user_id: userId,
      platform,
      connected: true,
      access_token: tokens.access_token,
      refresh_token: tokens.refresh_token || null,
      updated_at: new Date().toISOString()
    });
};

// Helper for Twitter OAuth process
export const processTwitterCallback = async (userId: string, oauthToken: string, oauthVerifier: string) => {
  try {
    // We'll add more complex token exchange logic later
    return storeOAuthTokens(userId, 'twitter', {
      access_token: oauthToken,
      refresh_token: oauthVerifier
    });
  } catch (error) {
    console.error('Error processing Twitter callback:', error);
    throw error;
  }
};
